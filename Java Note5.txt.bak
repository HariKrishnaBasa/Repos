Types of variables: 

Division1: 

Based on type of value represented  by a variable all variables divided into two types 

1. primitive variables: Can be used to represented primitive values. 

ex: int x=10;

2. Reference variables: Can be used to refer objects. 
ex: 

   student s= new student();

Division2: 
Based on position of declaration and behaviour all variables divided into 3 types.
1. Instance variable
2. Static variable
3. Local variable

1. Instance variables: 

1. If the value of the variable is varied from object to object , such type of variables are called instance variable. 
2. for every object a seperate instance variable will be created. 
3.Instance variable should be declared with in the class directly, but outside of any method or block or constructor.
4.Instance variable will be created at the time of creation and destroyed at the time of object destruction 
  hence the scope of instance variable is a exactly same as the scope of object.
5. Instance variable will be stored in heap memory as a part of object. 
6. we can't access instance variable directly from static area. But we can access using object reference.
   But we can access instance variable directly from instance area. 
 ex: 
 
 class Test 
 { 
    int x=10;
	
	p s v main(string[] args)
	{
	  sop(x); --compile time error --non static variable cannot referenced 
	  test t = new test();
	  sop(t.x); --valid 
	  
	}
 }
 7. For instance variables JVM will always provide default values and we are not required to perform initialization explicitly. 
   
  class Test 
 { 
    int x;
	double d;
	boolean b;
	string s;
	
	p s v main(string[] args)
	{
	  --sop(x); --compile time error --non static variable cannot referenced 
	  test t = new test();
	  sop(t.x); =0 --valid 
	  sop(d.x); =0.0
	  sop(b.x); =false
	  sop(s.x); =null
	  
	}
 }  
 8. Instance variables also known object level variables or attributes.
 
 Static variables: 
 1. If the value of the variable is not varied from object to object then it's not recomended to declare variable as instance varaible. 
    we have to declare such type of variable at class level by using static modifier. 
 
 2. In the case of instance variable for every object a seperated copy will be created but in the case of static variables a single copy will created at class level. 
     and shared by every object of the class. 
  3. static variables should be declared within the class direclty but outside of any method or block or constructor. 
  4. Static variables will be created at the time of class loading and destroyed at the time of unloading. Hence scope of static variable is exactly same as scope of .class file. 
  
5. static variables will be stored in method area. 

  Java TEST: 
  
  1. START JVM
  2. Create & start Main Thread.
  3. Locate TEst.class
  4. load test.class             --static variable creation
  5. execute main method.
  6.unload test.class            --destroy static variable creation. 
  7.terminate main thread.
  8. shut down jvm
6. we can access static variables either object reference or class name , but recomended to use class name. 
  WIth in the same class it's not require to use class name and we can access directly. 
class Test 
 { 
   static int x=10;
	
	p s v main(string[] args)
	{
	  
	  test t = new test();
	  sop(t.x); --valid 
	  sop(test.x); --valid 
	  sop(x); 
	  
	}
 }
 7. we can access static variables directly from both instance and static areas.
 
 class Test 
 { 
   static int x=10;
	
	p s v main(string[] args)
	{
	  
	  test t = new test();
	  sop(t.x); --valid 
	  sop(test.x); --valid 
	  sop(x); 
	  
	}
	p v main(string[] args)
	{
	  
	  test t = new test();
	  sop(t.x); --valid 
	  sop(test.x); --valid 
	  sop(x); 
	  
	}
 }
 8. FOr static variables jvm will provide default values and not required to perform intialization explicitly. 
 class Test 
 { 
static int x;
	static double d;
	staticboolean b;
	static string s;
	
	p s v main(string[] args)
	{
	  --sop(x); --compile time error --non static variable cannot referenced 
	  test t = new test();
	  sop(t.x); =0 --valid 
	  sop(d.x); =0.0
	  sop(b.x); =false
	  sop(s.x); =null
	  
	}
 } 
 
8. Static variables also known as class level variables or fields. 

example: 

class Test 
 { 
   static int x=10;
          int y=20;
	
	p s v main(string[] args)
	{
	  
	  test t = new test();
	    t.x=888;   
		t.y=999;
	  test t2 = new test();
	   sop(t2.x+...+t2.y); 888+20
	  
	}
 }
 
Local variables: 

Some times to meet temporary requirements of the programmer we can declare variables inside a method or block or constructor such type of variables 
are called local variables or temporary variables or stack variables or automatic variables. 

2.Local variables will be stored inside stack memory. 
3.while executing block local variable will be created and once block execution completed local variable will be destroyed. 
  Hence scope of variable is block execution in which we declared it.
  
4. For local variables jvm won't provide default values complusory we should perform initialization explicitly before using that variable i.e if your not using 
then it's not required to perform initialization.

5. For local variables final is the modifier. public, private, protected, static, transient, volatile  --illegal start of expression

6. Instance and static variables can be accessed by multiple threads simultaneously and hence these are not thread safe. 

